openapi: 3.0.3
info:
  title: ''
  version: 0.0.0
paths:
  /api/schema/:
    get:
      operationId: schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - ckb
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - ug
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - schema
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /api/users/friend-request/:
    post:
      operationId: users_friend_request_create
      description: |-
        Sends a friend request.
        receiver_id is the id of the user
        to whom the friend request is being sent
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FriendRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FriendRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FriendRequest'
        required: true
      security:
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FriendRequestResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FriendRequestError'
          description: ''
  /api/users/friend-request/{sender_id}/:
    post:
      operationId: users_friend_request_create_2
      description: |-
        Accepts or rejects a friend request.
        sender_id is the id of the user who sent the friend request.
      parameters:
      - in: query
        name: action
        schema:
          type: string
          enum:
          - accept
          - reject
        description: Accept or reject a friend request
        required: true
      - in: path
        name: sender_id
        schema:
          type: integer
        required: true
      tags:
      - users
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FriendRequestResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FriendRequestError'
          description: ''
  /api/users/friends/:
    get:
      operationId: users_friends_list
      description: This view lists all friends of a user.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - users
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
  /api/users/login/:
    post:
      operationId: users_login_create
      description: Logs in a user.
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LoginUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LoginUser'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginUserResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginUserError'
          description: ''
  /api/users/pending-requests/:
    get:
      operationId: users_pending_requests_list
      description: This view lists all pending friend requests of a user.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - users
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
  /api/users/register/:
    post:
      operationId: users_register_create
      description: Registers a new user.
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RegisterUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RegisterUser'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterUserResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterUserError'
          description: ''
  /api/users/search/:
    get:
      operationId: users_search_list
      description: This view handles the search of users.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: search
        schema:
          type: string
        description: Search users by email or name
        required: true
      tags:
      - users
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
components:
  schemas:
    FriendRequest:
      type: object
      description: Serializer for the FriendRequest model.
      properties:
        receiver_id:
          type: integer
      required:
      - receiver_id
    FriendRequestError:
      type: object
      description: Serializer for the error message after sending a friend request.
      properties:
        message:
          type: string
      required:
      - message
    FriendRequestResponse:
      type: object
      description: Serializer for the response message after sending a friend request.
      properties:
        message:
          type: string
      required:
      - message
    LoginUser:
      type: object
      description: Serializer for the login of a user.
      properties:
        email:
          type: string
          format: email
        password:
          type: string
      required:
      - email
      - password
    LoginUserError:
      type: object
      description: Serializer for the error message after logging in a user.
      properties:
        message:
          type: string
      required:
      - message
    LoginUserResponse:
      type: object
      description: Serializer for the response message after logging in a user.
      properties:
        message:
          type: string
        token:
          type: string
      required:
      - message
      - token
    PaginatedUserList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/User'
    RegisterUser:
      type: object
      description: This serializer is used to validate the data for creating a new
        user.
      properties:
        name:
          type: string
          nullable: true
          maxLength: 255
        email:
          type: string
          format: email
          maxLength: 255
        password:
          type: string
          writeOnly: true
          maxLength: 128
        confirm_password:
          type: string
          writeOnly: true
      required:
      - confirm_password
      - email
      - password
    RegisterUserError:
      type: object
      description: Serializer for the error message after registering a user.
      properties:
        non_field_errors:
          type: array
          items:
            type: string
        email:
          type: array
          items:
            type: string
        password:
          type: array
          items:
            type: string
        confirm_password:
          type: array
          items:
            type: string
      required:
      - non_field_errors
    RegisterUserResponse:
      type: object
      description: Serializer for the response message after registering a user.
      properties:
        message:
          type: string
      required:
      - message
    User:
      type: object
      description: Serializer for the user model.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          nullable: true
          maxLength: 255
        email:
          type: string
          format: email
          maxLength: 255
      required:
      - email
      - id
  securitySchemes:
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
